{"ast":null,"code":"var _jsxFileName = \"/Users/shengyi/Documents/BluebooksUI/src/GPT.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport OpenAI from \"openai\";\nimport Button from \"react-bootstrap/Button\";\nimport Card from \"react-bootstrap/Card\";\nimport Form from \"react-bootstrap/Form\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const GPT = () => {\n  _s();\n  const [aiContent, setAIContent] = useState(\"\");\n  const [isLoading, setIsLoading] = useState(false);\n  const [disableBtn, setDisableBtn] = useState(false);\n  let contentArray = [];\n  console.log(\"check content:\", contentArray);\n  if (aiContent !== \"\") {\n    contentArray.push(aiContent);\n  }\n\n  // console.log(\"checking content:\", content, process.env.REACT_APP_API_KEY);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      width: \"60%\",\n      textAlign: \"left\",\n      marginLeft: \"20%\"\n    },\n    children: /*#__PURE__*/_jsxDEV(Card, {\n      children: /*#__PURE__*/_jsxDEV(Form, {\n        children: /*#__PURE__*/_jsxDEV(Card.Body, {\n          children: [/*#__PURE__*/_jsxDEV(Card.Body, {\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              style: {\n                marginTop: \"10px\",\n                fontWeight: \"bolder\"\n              },\n              children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                children: \"Answers:\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 27,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                children: \"* Please put your gpt chat secret key into your local storage to start using the ChatBot\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 28,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 26,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              style: {\n                marginTop: \"10px\",\n                minHeight: \"400px\"\n              },\n              children: contentArray.map((val, key) => {\n                return /*#__PURE__*/_jsxDEV(\"ul\", {\n                  children: /*#__PURE__*/_jsxDEV(\"div\", {\n                    style: {\n                      whiteSpace: \"pre-line\"\n                    },\n                    children: val\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 37,\n                    columnNumber: 23\n                  }, this)\n                }, key, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 36,\n                  columnNumber: 21\n                }, this);\n              })\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 33,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 25,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            style: {\n              marginTop: \"10px\"\n            },\n            children: [/*#__PURE__*/_jsxDEV(\"span\", {\n              style: {\n                fontSize: \"16px\",\n                fontWeight: \"bolder\",\n                padding: \"10px\"\n              },\n              children: \"Type in your questions, It will tell you the answers:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 45,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              children: /*#__PURE__*/_jsxDEV(Form.Control, {\n                as: \"textarea\",\n                required: true,\n                rows: \"1\",\n                id: \"text\",\n                name: \"text\",\n                style: {\n                  marginLeft: \"10px\",\n                  width: \"100%\",\n                  height: \"100px\"\n                }\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 55,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 54,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 44,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            style: {\n              textAlign: \"right\",\n              padding: \"10px\",\n              display: \"flex\"\n            },\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              style: {\n                marginRight: \"10px\"\n              },\n              children: /*#__PURE__*/_jsxDEV(Button, {\n                className: \"bg-primary\",\n                disabled: disableBtn,\n                onClick: async () => {\n                  setDisableBtn(true);\n                  setIsLoading(true);\n                  var content = document.getElementById(\"text\").value;\n                  const openai = new OpenAI({\n                    apiKey: localStorage.getItem(\"api_key\"),\n                    dangerouslyAllowBrowser: true\n                    // apiKey: process.env.API_KEY, // This is the default and can be omitted\n                  });\n                  try {\n                    var _completion$choices$, _completion$choices$$;\n                    const completion = await openai.chat.completions.create({\n                      messages: [{\n                        role: \"user\",\n                        content: content\n                      }],\n                      model: \"gpt-3.5-turbo\"\n                    });\n                    console.log(\"test\", completion.choices[0]);\n                    setAIContent((_completion$choices$ = completion.choices[0]) === null || _completion$choices$ === void 0 ? void 0 : (_completion$choices$$ = _completion$choices$.message) === null || _completion$choices$$ === void 0 ? void 0 : _completion$choices$$.content);\n                    setDisableBtn(false);\n                    setIsLoading(false);\n                  } catch (e) {\n                    window.alert(e.message);\n                    setDisableBtn(false);\n                    setIsLoading(false);\n                  }\n                },\n                children: \"Send\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 74,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 73,\n              columnNumber: 15\n            }, this), isLoading && /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"spinner-border text-primary\",\n              role: \"status\",\n              children: /*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"sr-only\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 107,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 106,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 70,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 24,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 23,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 21,\n    columnNumber: 5\n  }, this);\n};\n_s(GPT, \"1Ue9edLIKDnrlkw0dI7lphy2htU=\");\n_c = GPT;\nvar _c;\n$RefreshReg$(_c, \"GPT\");","map":{"version":3,"names":["React","useState","OpenAI","Button","Card","Form","jsxDEV","_jsxDEV","GPT","_s","aiContent","setAIContent","isLoading","setIsLoading","disableBtn","setDisableBtn","contentArray","console","log","push","style","width","textAlign","marginLeft","children","Body","marginTop","fontWeight","fileName","_jsxFileName","lineNumber","columnNumber","minHeight","map","val","key","whiteSpace","fontSize","padding","Control","as","required","rows","id","name","height","display","marginRight","className","disabled","onClick","content","document","getElementById","value","openai","apiKey","localStorage","getItem","dangerouslyAllowBrowser","_completion$choices$","_completion$choices$$","completion","chat","completions","create","messages","role","model","choices","message","e","window","alert","_c","$RefreshReg$"],"sources":["/Users/shengyi/Documents/BluebooksUI/src/GPT.js"],"sourcesContent":["import React, { useState } from \"react\";\nimport OpenAI from \"openai\";\nimport Button from \"react-bootstrap/Button\";\nimport Card from \"react-bootstrap/Card\";\nimport Form from \"react-bootstrap/Form\";\n\nexport const GPT = () => {\n  const [aiContent, setAIContent] = useState(\"\");\n  const [isLoading, setIsLoading] = useState(false);\n  const [disableBtn, setDisableBtn] = useState(false);\n\n  let contentArray = [];\n  console.log(\"check content:\", contentArray);\n\n  if (aiContent !== \"\") {\n    contentArray.push(aiContent);\n  }\n\n  // console.log(\"checking content:\", content, process.env.REACT_APP_API_KEY);\n  return (\n    <div style={{ width: \"60%\", textAlign: \"left\", marginLeft: \"20%\" }}>\n      <Card>\n        <Form>\n          <Card.Body>\n            <Card.Body>\n              <div style={{ marginTop: \"10px\", fontWeight: \"bolder\" }}>\n                <span>Answers:</span>\n                <span>\n                  * Please put your gpt chat secret key into your local storage\n                  to start using the ChatBot\n                </span>\n              </div>\n              <div style={{ marginTop: \"10px\", minHeight: \"400px\" }}>\n                {contentArray.map((val, key) => {\n                  return (\n                    <ul key={key}>\n                      <div style={{ whiteSpace: \"pre-line\" }}>{val}</div>\n                    </ul>\n                  );\n                })}\n              </div>\n            </Card.Body>\n\n            <div style={{ marginTop: \"10px\" }}>\n              <span\n                style={{\n                  fontSize: \"16px\",\n                  fontWeight: \"bolder\",\n                  padding: \"10px\",\n                }}\n              >\n                Type in your questions, It will tell you the answers:\n              </span>\n              <span>\n                <Form.Control\n                  as=\"textarea\"\n                  required={true}\n                  rows=\"1\"\n                  id=\"text\"\n                  name=\"text\"\n                  style={{\n                    marginLeft: \"10px\",\n                    width: \"100%\",\n                    height: \"100px\",\n                  }}\n                />\n              </span>\n            </div>\n\n            <div\n              style={{ textAlign: \"right\", padding: \"10px\", display: \"flex\" }}\n            >\n              <div style={{ marginRight: \"10px\" }}>\n                <Button\n                  className=\"bg-primary\"\n                  disabled={disableBtn}\n                  onClick={async () => {\n                    setDisableBtn(true);\n                    setIsLoading(true);\n                    var content = document.getElementById(\"text\").value;\n                    const openai = new OpenAI({\n                      apiKey: localStorage.getItem(\"api_key\"),\n                      dangerouslyAllowBrowser: true,\n                      // apiKey: process.env.API_KEY, // This is the default and can be omitted\n                    });\n                    try {\n                      const completion = await openai.chat.completions.create({\n                        messages: [{ role: \"user\", content: content }],\n                        model: \"gpt-3.5-turbo\",\n                      });\n                      console.log(\"test\", completion.choices[0]);\n                      setAIContent(completion.choices[0]?.message?.content);\n                      setDisableBtn(false);\n                      setIsLoading(false);\n                    } catch (e) {\n                      window.alert(e.message);\n                      setDisableBtn(false);\n                      setIsLoading(false);\n                    }\n                  }}\n                >\n                  Send\n                </Button>\n              </div>\n              {isLoading && (\n                <div className=\"spinner-border text-primary\" role=\"status\">\n                  <span className=\"sr-only\"></span>\n                </div>\n              )}\n            </div>\n          </Card.Body>\n        </Form>\n      </Card>\n    </div>\n  );\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}